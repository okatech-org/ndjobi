/**
 * Script pour cr√©er le compte Super Admin imm√©diatement
 * Utilise l'API Supabase directement
 */

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase (depuis vos credentials)
const SUPABASE_URL = 'https://xfxqwlbqysiezqdpeqpv.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhmeHF3bGJxeXNpZXpxZHBlcXB2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAyMDYyNjgsImV4cCI6MjA3NTc4MjI2OH0.0DobXhl43BgOeUMKEmyWyYkM7Iuwc_cBhD7mYCZMO8k';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

const SUPER_ADMIN_EMAIL = '33661002616@ndjobi.com';
const SUPER_ADMIN_PHONE = '+33661002616';
const SUPER_ADMIN_PASSWORD = '999999';

async function createSuperAdmin() {
  console.log('üîß Tentative de cr√©ation du compte Super Admin...');
  console.log('================================================\n');

  try {
    // √âtape 1 : Cr√©er le compte avec signUp
    console.log('üìù Cr√©ation du compte auth...');
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: SUPER_ADMIN_EMAIL,
      password: SUPER_ADMIN_PASSWORD,
      phone: SUPER_ADMIN_PHONE,
      options: {
        data: {
          full_name: 'Super Administrateur',
          phone: SUPER_ADMIN_PHONE,
          organization: 'Administration Syst√®me'
        }
      }
    });

    if (signUpError) {
      if (signUpError.message.includes('already registered')) {
        console.log('‚ö†Ô∏è  Le compte existe d√©j√† dans auth.users');
        console.log('    Tentative de connexion pour r√©cup√©rer l\'ID...\n');
        
        // Essayer de se connecter pour r√©cup√©rer l'ID
        const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
          email: SUPER_ADMIN_EMAIL,
          password: SUPER_ADMIN_PASSWORD
        });

        if (signInError) {
          console.error('‚ùå Erreur de connexion:', signInError.message);
          throw new Error('Le compte existe mais impossible de se connecter. Utilisez le SQL Editor de Supabase.');
        }

        const userId = signInData.user.id;
        console.log('‚úÖ Connexion r√©ussie, ID r√©cup√©r√©:', userId);
        
        await createProfileAndRole(userId);
        
      } else {
        console.error('‚ùå Erreur lors de la cr√©ation:', signUpError.message);
        throw signUpError;
      }
    } else {
      console.log('‚úÖ Compte cr√©√© avec succ√®s');
      const userId = signUpData.user.id;
      console.log('   ID:', userId);
      
      await createProfileAndRole(userId);
    }

    console.log('\n‚úÖ SUCC√àS ! Compte Super Admin configur√©');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìã Informations de connexion :');
    console.log('   URL : /auth/super-admin');
    console.log('   PIN : 999999');
    console.log('\nüéØ Testez maintenant sur votre application !');
    
  } catch (error) {
    console.error('\n‚ùå ERREUR:', error.message);
    console.log('\nüí° SOLUTION ALTERNATIVE :');
    console.log('   Utilisez le fichier EXECUTER-MAINTENANT.md');
    console.log('   et ex√©cutez le script SQL dans Supabase SQL Editor');
    process.exit(1);
  }
}

async function createProfileAndRole(userId) {
  console.log('\nüìù Cr√©ation du profil...');
  
  // Cr√©er le profil
  const { error: profileError } = await supabase
    .from('profiles')
    .upsert({
      id: userId,
      email: SUPER_ADMIN_EMAIL,
      full_name: 'Super Administrateur',
      phone: SUPER_ADMIN_PHONE,
      organization: 'Administration Syst√®me'
    });

  if (profileError) {
    console.error('‚ùå Erreur profil:', profileError.message);
    throw profileError;
  }
  console.log('‚úÖ Profil cr√©√©');

  console.log('\nüìù Attribution du r√¥le super_admin...');
  
  // Attribuer le r√¥le
  const { error: roleError } = await supabase
    .from('user_roles')
    .upsert({
      user_id: userId,
      role: 'super_admin'
    });

  if (roleError) {
    console.error('‚ùå Erreur r√¥le:', roleError.message);
    throw roleError;
  }
  console.log('‚úÖ R√¥le attribu√©');

  // V√©rification
  console.log('\nüîç V√©rification...');
  const { data: verif, error: verifError } = await supabase
    .from('profiles')
    .select('id, email, full_name, phone, organization')
    .eq('id', userId)
    .single();

  if (verifError) {
    console.error('‚ö†Ô∏è  Erreur v√©rification:', verifError.message);
  } else {
    console.log('‚úÖ Profil v√©rifi√©:', verif);
  }

  const { data: roleVerif, error: roleVerifError } = await supabase
    .from('user_roles')
    .select('role')
    .eq('user_id', userId)
    .single();

  if (roleVerifError) {
    console.error('‚ö†Ô∏è  Erreur v√©rification r√¥le:', roleVerifError.message);
  } else {
    console.log('‚úÖ R√¥le v√©rifi√©:', roleVerif.role);
  }
}

createSuperAdmin();

