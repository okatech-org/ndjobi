#!/usr/bin/env ts-node
/**
 * Script de cr√©ation des comptes d√©mo NDJOBI
 * Utilise l'API Admin Supabase pour cr√©er les utilisateurs
 */

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase (local ou prod)
const SUPABASE_URL = process.env.SUPABASE_URL || 'http://127.0.0.1:54321';
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || 
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

interface DemoAccount {
  email: string;
  password: string;
  role: 'user' | 'agent' | 'admin';
  fullName: string;
  phone: string;
  description: string;
}

const DEMO_ACCOUNTS: DemoAccount[] = [
  {
    email: '24177777001@ndjobi.com',
    password: '123456',
    role: 'user',
    fullName: 'Citoyen D√©mo',
    phone: '+24177777001',
    description: 'Compte d√©mo pour un citoyen standard'
  },
  {
    email: '24177777002@ndjobi.com',
    password: '123456',
    role: 'agent',
    fullName: 'Agent DGSS D√©mo',
    phone: '+24177777002',
    description: 'Compte d√©mo pour un agent de la DGSS'
  },
  {
    email: '24177777003@ndjobi.com',
    password: '123456',
    role: 'admin',
    fullName: 'Protocole d\'√âtat - Pr√©sident',
    phone: '+24177777003',
    description: 'Compte d√©mo pour le Protocole d\'√âtat (Pr√©sident)'
  }
];

async function createDemoAccount(account: DemoAccount): Promise<void> {
  console.log(`\nüìù Cr√©ation du compte: ${account.fullName} (${account.role})`);
  console.log(`   Email: ${account.email}`);
  
  try {
    // 1. Cr√©er l'utilisateur avec Supabase Admin
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: account.email,
      password: account.password,
      email_confirm: true,
      user_metadata: {
        full_name: account.fullName,
        phone: account.phone,
        role: account.role
      }
    });

    if (authError) {
      // Si l'utilisateur existe d√©j√†, on r√©cup√®re son ID
      if (authError.message.includes('already registered')) {
        console.log(`   ‚ö†Ô∏è  Utilisateur existe d√©j√†, r√©cup√©ration...`);
        
        // R√©cup√©rer l'utilisateur existant
        const { data: existingUsers } = await supabase.auth.admin.listUsers();
        const existingUser = existingUsers?.users.find(u => u.email === account.email);
        
        if (!existingUser) {
          throw new Error('Impossible de r√©cup√©rer l\'utilisateur existant');
        }

        // Mettre √† jour le profil
        await updateUserProfile(existingUser.id, account);
        console.log(`   ‚úÖ Compte mis √† jour avec succ√®s`);
        return;
      }
      throw authError;
    }

    if (!authData.user) {
      throw new Error('Utilisateur non cr√©√©');
    }

    console.log(`   ‚úÖ Utilisateur cr√©√©: ${authData.user.id}`);

    // 2. Cr√©er ou mettre √† jour le profil
    await updateUserProfile(authData.user.id, account);

  } catch (error) {
    console.error(`   ‚ùå Erreur:`, error);
    throw error;
  }
}

async function updateUserProfile(userId: string, account: DemoAccount): Promise<void> {
  // 2. Cr√©er/mettre √† jour le profil
  const { error: profileError } = await supabase
    .from('profiles')
    .upsert({
      id: userId,
      email: account.email,
      full_name: account.fullName,
      phone: account.phone,
      updated_at: new Date().toISOString()
    });

  if (profileError) {
    console.error('   ‚ö†Ô∏è  Erreur profil:', profileError.message);
  } else {
    console.log(`   ‚úÖ Profil cr√©√©/mis √† jour`);
  }

  // 3. Assigner le r√¥le
  const { error: roleError } = await supabase
    .from('user_roles')
    .upsert({
      user_id: userId,
      role: account.role
    });

  if (roleError) {
    console.error('   ‚ö†Ô∏è  Erreur r√¥le:', roleError.message);
  } else {
    console.log(`   ‚úÖ R√¥le assign√©: ${account.role}`);
  }
}

async function createTestData(): Promise<void> {
  console.log('\nüìä Cr√©ation des donn√©es de test...');
  
  try {
    // R√©cup√©rer les IDs des utilisateurs
    const { data: citoyenData } = await supabase
      .from('profiles')
      .select('id')
      .eq('email', '24177777001@ndjobi.com')
      .single();

    if (citoyenData) {
      // Cr√©er un signalement de test
      const { error: signalementError } = await supabase
        .from('signalements')
        .insert({
          title: 'Signalement de test - Corruption administrative',
          description: 'Ceci est un signalement de d√©monstration pour tester le syst√®me NDJOBI. Les donn√©es sont fictives.',
          category: 'corruption',
          urgency: 'high',
          location: 'Libreville, Gabon',
          author_id: citoyenData.id,
          status: 'pending',
          is_anonymous: false
        });

      if (!signalementError) {
        console.log('   ‚úÖ Signalement de test cr√©√©');
      }
    }

    // Cr√©er un projet de test
    if (citoyenData) {
      const { error: projetError } = await supabase
        .from('projets')
        .insert({
          title: 'Projet de test - Innovation technologique',
          description: 'Projet de d√©monstration pour tester la protection blockchain.',
          category: 'technologie',
          author_id: citoyenData.id,
          status: 'pending',
          is_anonymous: false
        });

      if (!projetError) {
        console.log('   ‚úÖ Projet de test cr√©√©');
      }
    }

  } catch (error) {
    console.error('   ‚ö†Ô∏è  Erreur cr√©ation donn√©es de test:', error);
  }
}

async function verifyAccounts(): Promise<void> {
  console.log('\nüîç V√©rification des comptes cr√©√©s...\n');
  
  for (const account of DEMO_ACCOUNTS) {
    try {
      // R√©cup√©rer l'utilisateur
      const { data: profile } = await supabase
        .from('profiles')
        .select('id, email, full_name, phone')
        .eq('email', account.email)
        .single();

      if (profile) {
        // R√©cup√©rer le r√¥le
        const { data: roleData } = await supabase
          .from('user_roles')
          .select('role')
          .eq('user_id', profile.id)
          .single();

        console.log(`‚úÖ ${account.fullName}`);
        console.log(`   Email: ${profile.email}`);
        console.log(`   Phone: ${profile.phone}`);
        console.log(`   R√¥le: ${roleData?.role || 'NON ASSIGN√â'}`);
        console.log(`   ID: ${profile.id}`);
        console.log('');
      } else {
        console.log(`‚ùå ${account.fullName} - NON TROUV√â`);
      }
    } catch (error) {
      console.error(`‚ùå Erreur v√©rification ${account.email}:`, error);
    }
  }
}

async function main() {
  console.log('üöÄ NDJOBI - Setup des comptes d√©mo');
  console.log('=====================================');
  console.log(`üìç Supabase URL: ${SUPABASE_URL}`);
  console.log('');

  try {
    // Cr√©er les comptes
    for (const account of DEMO_ACCOUNTS) {
      await createDemoAccount(account);
    }

    // Cr√©er les donn√©es de test
    await createTestData();

    // V√©rifier les comptes
    await verifyAccounts();

    console.log('‚úÖ Setup termin√© avec succ√®s!\n');
    console.log('üìã Identifiants des comptes d√©mo:');
    console.log('=====================================');
    DEMO_ACCOUNTS.forEach(account => {
      console.log(`\n${account.fullName} (${account.role}):`);
      console.log(`  Email: ${account.email}`);
      console.log(`  Mot de passe: ${account.password}`);
    });
    console.log('\n');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du setup:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main().then(() => process.exit(0));
}

export { createDemoAccount, verifyAccounts };

