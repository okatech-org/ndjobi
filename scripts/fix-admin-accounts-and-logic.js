import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fs from 'fs';

// Charger les variables d'environnement
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://xfxqwlbqysiezqdpeqpv.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhmeHF3bGJxeXNpZXpxZHBlcXB2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDIwNjI2OCwiZXhwIjoyMDc1NzgyMjY4fQ.0DobXhl43BgOeUMKEmyWyYkM7Iuwc_cBhD7mYCZMO8k';

if (!supabaseUrl) {
  console.error('‚ùå URL Supabase manquante');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Comptes √† corriger selon la logique du diagramme
const accountsToFix = [
  {
    email: '24177888001@ndjobi.com',
    phone: '+24177888001',
    pin: '111111',
    fullName: 'Pr√©sident de la R√©publique',
    role: 'admin', // Selon le diagramme: Pr√©sident/Admin = Vue globale, Validation
    organization: 'Pr√©sidence de la R√©publique',
    fonction: 'Pr√©sident / Administrateur',
    description: 'Vue globale, Validation (selon diagramme)'
  },
  {
    email: '24177888002@ndjobi.com',
    phone: '+24177888002',
    pin: '222222',
    fullName: 'Sous-Admin DGSS',
    role: 'sub_admin', // Sous-Admin = Vue sectorielle
    organization: 'DGSS (Direction G√©n√©rale de la S√©curit√© d\'√âtat)',
    fonction: 'Sous-Administrateur DGSS',
    description: 'Vue sectorielle DGSS'
  },
  {
    email: '24177888003@ndjobi.com',
    phone: '+24177888003',
    pin: '333333',
    fullName: 'Sous-Admin DGR',
    role: 'sub_admin', // Sous-Admin = Vue sectorielle
    organization: 'DGR (Direction G√©n√©rale du Renseignement)',
    fonction: 'Sous-Administrateur DGR',
    description: 'Vue sectorielle DGR'
  }
];

async function fixAdminAccounts() {
  console.log('üîß CORRECTION DES COMPTES ADMIN SELON LA LOGIQUE DU DIAGRAMME');
  console.log('=============================================================');
  console.log('');
  console.log('üìã LOGIQUE IMPL√âMENT√âE:');
  console.log('   ‚Ä¢ Super Admin: Contr√¥le total (r√¥le syst√®me)');
  console.log('   ‚Ä¢ Pr√©sident/Admin: Vue globale, Validation');
  console.log('   ‚Ä¢ Sous-Admin: Vue sectorielle');
  console.log('');

  for (const account of accountsToFix) {
    console.log(`üîß Correction du compte: ${account.fullName}`);
    console.log(`   üìß Email: ${account.email}`);
    console.log(`   üì± T√©l√©phone: ${account.phone}`);
    console.log(`   üîê PIN: ${account.pin}`);
    console.log(`   üîë R√¥le: ${account.role}`);
    console.log(`   üìù Description: ${account.description}`);
    console.log('');

    try {
      // 1. V√©rifier si l'utilisateur existe dans auth.users
      const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
      
      if (usersError) {
        console.error(`‚ùå Erreur r√©cup√©ration utilisateurs:`, usersError.message);
        continue;
      }

      const existingUser = users.users.find(u => u.email === account.email);
      
      if (!existingUser) {
        console.log(`‚ö†Ô∏è  Utilisateur ${account.email} non trouv√© dans auth.users`);
        console.log(`   Cr√©ation du compte...`);
        
        // Cr√©er l'utilisateur
        const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
          email: account.email,
          phone: account.phone,
          password: account.pin,
          email_confirm: true,
          phone_confirm: true,
          user_metadata: {
            full_name: account.fullName,
            phone: account.phone,
            role: account.role,
            organization: account.organization,
            fonction: account.fonction
          }
        });

        if (createError) {
          console.error(`‚ùå Erreur cr√©ation utilisateur:`, createError.message);
          continue;
        }

        console.log(`‚úÖ Utilisateur cr√©√©: ${newUser.user.id}`);
      } else {
        console.log(`‚úÖ Utilisateur existant trouv√©: ${existingUser.id}`);
      }

      const userId = existingUser?.id || newUser?.user.id;

      // 2. Mettre √† jour le profil
      console.log(`üìù Mise √† jour du profil...`);
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .upsert({
          id: userId,
          email: account.email,
          full_name: account.fullName,
          phone: account.phone,
          organization: account.organization,
          fonction: account.fonction,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single();

      if (profileError) {
        console.error(`‚ùå Erreur profil:`, profileError.message);
        continue;
      }

      console.log(`‚úÖ Profil mis √† jour: ${profileData.id}`);

      // 3. Mettre √† jour le r√¥le selon la logique
      console.log(`üîë Mise √† jour du r√¥le: ${account.role}`);
      const { data: roleData, error: roleError } = await supabase
        .from('user_roles')
        .upsert({
          user_id: userId,
          role: account.role,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single();

      if (roleError) {
        console.error(`‚ùå Erreur r√¥le:`, roleError.message);
        continue;
      }

      console.log(`‚úÖ R√¥le mis √† jour: ${roleData.role}`);

      // 4. Mettre √† jour le PIN
      console.log(`üîê Mise √† jour du PIN...`);
      const { data: pinData, error: pinError } = await supabase
        .from('user_pins')
        .upsert({
          user_id: userId,
          pin: account.pin,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single();

      if (pinError) {
        console.error(`‚ùå Erreur PIN:`, pinError.message);
        continue;
      }

      console.log(`‚úÖ PIN mis √† jour`);

      console.log(`üéâ Compte ${account.fullName} corrig√© avec succ√®s !`);
      console.log('');

    } catch (error) {
      console.error(`‚ùå Erreur g√©n√©rale pour ${account.fullName}:`, error.message);
      console.log('');
    }
  }

  console.log('üß™ TESTS DE CONNEXION RECOMMAND√âS:');
  console.log('===================================');
  console.log('');
  console.log('1. Pr√©sident (Vue globale, Validation):');
  console.log('   ‚Ä¢ T√©l√©phone: +24177888001');
  console.log('   ‚Ä¢ PIN: 111111');
  console.log('   ‚Ä¢ Dashboard: /dashboard/admin');
  console.log('   ‚Ä¢ Privil√®ges: Vue nationale, validation cas critiques');
  console.log('');
  console.log('2. Sous-Admin DGSS (Vue sectorielle):');
  console.log('   ‚Ä¢ T√©l√©phone: +24177888002');
  console.log('   ‚Ä¢ PIN: 222222');
  console.log('   ‚Ä¢ Dashboard: /dashboard/admin');
  console.log('   ‚Ä¢ Privil√®ges: Vue sectorielle s√©curit√© d\'√âtat');
  console.log('');
  console.log('3. Sous-Admin DGR (Vue sectorielle):');
  console.log('   ‚Ä¢ T√©l√©phone: +24177888003');
  console.log('   ‚Ä¢ PIN: 333333');
  console.log('   ‚Ä¢ Dashboard: /dashboard/admin');
  console.log('   ‚Ä¢ Privil√®ges: Vue sectorielle renseignement');
  console.log('');
  console.log('üìä HI√âRARCHIE CORRIG√âE SELON LE DIAGRAMME:');
  console.log('==========================================');
  console.log('üî¥ Super Admin: Contr√¥le total (r√¥le syst√®me)');
  console.log('üü† Pr√©sident/Admin: Vue globale, Validation');
  console.log('üü° Sous-Admin: Vue sectorielle');
  console.log('üü¢ Agent: Traitement terrain');
  console.log('üîµ User: Signalement');
}

// Ex√©cuter le script
fixAdminAccounts();
