#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration Supabase Production
const SUPABASE_URL = 'https://xfxqwlbqysiezqdpeqpv.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhmeHF3bGJxeXNpZXpxZHBlcXB2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAyMDYyNjgsImV4cCI6MjA3NTc4MjI2OH0.0DobXhl43BgOeUMKEmyWyYkM7Iuwc_cBhD7mYCZMO8k';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function createAdminAccount() {
  console.log('üëë CR√âATION - Compte Admin Pr√©sident');
  console.log('====================================');
  
  try {
    // Cr√©er le compte admin avec signUp
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: '24177888001@ndjobi.com',
      password: '111111',
      options: {
        data: {
          phone: '+24177888001',
          full_name: 'Pr√©sident de la R√©publique',
          role: 'super_admin',
          fonction: 'Pr√©sident / Administrateur',
          organisation: 'Pr√©sidence de la R√©publique'
        }
      }
    });
    
    if (authError) {
      console.log(`‚ùå Erreur cr√©ation compte: ${authError.message}`);
      console.log(`   Code: ${authError.status}`);
      
      if (authError.message.includes('User already registered')) {
        console.log('‚úÖ Le compte existe d√©j√†');
        console.log('üîß Tentative de connexion...');
        
        const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
          email: '24177888001@ndjobi.com',
          password: '111111'
        });
        
        if (loginError) {
          console.log(`‚ùå Erreur de connexion: ${loginError.message}`);
        } else {
          console.log('‚úÖ Connexion r√©ussie');
          console.log(`   - User ID: ${loginData.user?.id}`);
          
          // Cr√©er le profil
          await createProfile(loginData.user.id);
          
          // Se d√©connecter
          await supabase.auth.signOut();
        }
      }
    } else {
      console.log('‚úÖ Compte admin cr√©√© avec succ√®s');
      console.log(`   - User ID: ${authData.user?.id}`);
      console.log(`   - Email: ${authData.user?.email}`);
      
      if (authData.user) {
        // Cr√©er le profil
        await createProfile(authData.user.id);
      }
    }
    
  } catch (err) {
    console.log(`‚ùå Erreur: ${err}`);
  }
}

async function createProfile(userId) {
  console.log('\nüìù CR√âATION - Profil utilisateur');
  console.log('=================================');
  
  try {
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (profileError && profileError.code === 'PGRST116') {
      console.log('‚ö†Ô∏è  Profil manquant - cr√©ation...');
      
      const { error: insertError } = await supabase
        .from('profiles')
        .insert({
          id: userId,
          email: '24177888001@ndjobi.com',
          phone: '+24177888001',
          full_name: 'Pr√©sident de la R√©publique',
          role: 'super_admin',
          fonction: 'Pr√©sident / Administrateur',
          organisation: 'Pr√©sidence de la R√©publique',
          created_at: new Date().toISOString()
        });
      
      if (insertError) {
        console.log(`‚ùå Erreur cr√©ation profil: ${insertError.message}`);
      } else {
        console.log('‚úÖ Profil cr√©√© avec succ√®s');
      }
    } else if (profileError) {
      console.log(`‚ùå Erreur profil: ${profileError.message}`);
    } else {
      console.log('‚úÖ Profil existe d√©j√†');
    }
    
    // Cr√©er le r√¥le
    await createRole(userId);
    
  } catch (err) {
    console.log(`‚ùå Erreur profil: ${err}`);
  }
}

async function createRole(userId) {
  console.log('\nüîê CR√âATION - R√¥le utilisateur');
  console.log('==============================');
  
  try {
    const { data: role, error: roleError } = await supabase
      .from('user_roles')
      .select('*')
      .eq('user_id', userId)
      .single();
    
    if (roleError && roleError.code === 'PGRST116') {
      console.log('‚ö†Ô∏è  R√¥le manquant - cr√©ation...');
      
      const { error: insertRoleError } = await supabase
        .from('user_roles')
        .insert({
          user_id: userId,
          role: 'super_admin',
          created_at: new Date().toISOString()
        });
      
      if (insertRoleError) {
        console.log(`‚ùå Erreur cr√©ation r√¥le: ${insertRoleError.message}`);
      } else {
        console.log('‚úÖ R√¥le cr√©√© avec succ√®s');
      }
    } else if (roleError) {
      console.log(`‚ùå Erreur r√¥le: ${roleError.message}`);
    } else {
      console.log('‚úÖ R√¥le existe d√©j√†');
    }
    
  } catch (err) {
    console.log(`‚ùå Erreur r√¥le: ${err}`);
  }
}

async function createPin(userId) {
  console.log('\nüîë CR√âATION - Code PIN');
  console.log('======================');
  
  try {
    const { data: pin, error: pinError } = await supabase
      .from('user_pins')
      .select('*')
      .eq('user_id', userId)
      .single();
    
    if (pinError && pinError.code === 'PGRST116') {
      console.log('‚ö†Ô∏è  PIN manquant - cr√©ation...');
      
      const { error: insertPinError } = await supabase
        .from('user_pins')
        .insert({
          user_id: userId,
          pin: '111111',
          created_at: new Date().toISOString()
        });
      
      if (insertPinError) {
        console.log(`‚ùå Erreur cr√©ation PIN: ${insertPinError.message}`);
      } else {
        console.log('‚úÖ PIN cr√©√© avec succ√®s');
      }
    } else if (pinError) {
      console.log(`‚ùå Erreur PIN: ${pinError.message}`);
    } else {
      console.log('‚úÖ PIN existe d√©j√†');
    }
    
  } catch (err) {
    console.log(`‚ùå Erreur PIN: ${err}`);
  }
}

async function testFinalLogin() {
  console.log('\nüîê TEST - Connexion finale');
  console.log('==========================');
  
  try {
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: '24177888001@ndjobi.com',
      password: '111111'
    });
    
    if (authError) {
      console.log(`‚ùå Erreur de connexion: ${authError.message}`);
      console.log(`   Code: ${authError.status}`);
    } else {
      console.log('‚úÖ Connexion admin r√©ussie');
      console.log(`   - User ID: ${authData.user?.id}`);
      console.log(`   - Email: ${authData.user?.email}`);
      
      // Se d√©connecter
      await supabase.auth.signOut();
    }
    
  } catch (err) {
    console.log(`‚ùå Erreur lors du test: ${err}`);
  }
}

async function main() {
  console.log('üöÄ SCRIPT DE CR√âATION COMPTE ADMIN');
  console.log('===================================');
  
  await createAdminAccount();
  await testFinalLogin();
  
  console.log('\n‚úÖ CR√âATION TERMIN√âE');
  console.log('\nüìã Testez maintenant:');
  console.log('1. Red√©marrez le serveur de d√©veloppement');
  console.log('2. Connectez-vous avec:');
  console.log('   - Email: 24177888001@ndjobi.com');
  console.log('   - PIN: 111111');
  console.log('3. V√©rifiez l\'acc√®s au dashboard admin');
}

main().catch(console.error);
