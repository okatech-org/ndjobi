import { supabase } from '@/integrations/supabase/client';
import type { UserRole } from '@/types/auth';
import { deviceIdentityService } from '@/services/deviceIdentity';
import { defaultAnonymousAccountService } from '@/services/defaultAnonymousAccount';

/**
 * Service d'authentification s√©curis√© pour NDJOBI
 * G√®re l'authentification sans comptes d√©mo
 */
export class AuthService {
  private static instance: AuthService;
  private currentUser: any = null;
  private currentRole: UserRole | null = null;
  private sessionToken: string | null = null;

  private constructor() {
    this.initializeAuthListener();
  }

  static getInstance(): AuthService {
    if (!AuthService.instance) {
      AuthService.instance = new AuthService();
    }
    return AuthService.instance;
  }

  /**
   * Initialise l'√©couteur d'√©v√©nements d'authentification
   */
  private initializeAuthListener() {
    supabase.auth.onAuthStateChange(async (event, session) => {
      if (session) {
        await this.loadUserProfile(session.user.id);
      } else {
        this.clearSession();
      }
    });
  }

  /**
   * Authentification avec t√©l√©phone et PIN
   */
  async authenticateWithPhone(phone: string, pin: string): Promise<{
    success: boolean;
    user?: any;
    role?: UserRole;
    error?: string;
  }> {
    try {
      // Nettoyer le num√©ro de t√©l√©phone
      const cleanPhone = phone.replace(/\D/g, '');
      const email = `${cleanPhone}@ndjobi.com`; // Domaine unique standardis√©

      // Authentification via Supabase
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password: pin,
      });

      if (error) {
        return { success: false, error: error.message };
      }

      if (!data.user) {
        return { success: false, error: 'Authentification √©chou√©e' };
      }

      // Charger le profil et le r√¥le
      const role = await this.getUserRole(data.user.id);
      
      // Enregistrer la session
      await this.saveSession(data.user, role, data.session?.access_token);

      // Enregistrer l'identit√© de l'appareil
      await deviceIdentityService.linkToUser(data.user.id);

      return {
        success: true,
        user: data.user,
        role,
      };
    } catch (error) {
      console.error('Erreur d\'authentification:', error);
      return { 
        success: false, 
        error: 'Une erreur est survenue lors de l\'authentification' 
      };
    }
  }

  /**
   * Restaure une session existante depuis sessionStorage
   * Utilis√© lors du rechargement de la page
   */
  async authenticateWithSession(userId: string, sessionRole: UserRole): Promise<void> {
    try {
      await this.loadUserProfile(userId);
      // Le r√¥le est d√©j√† charg√© dans loadUserProfile, mais on peut forcer si n√©cessaire
      if (this.currentRole !== sessionRole) {
        console.warn('R√¥le de session diff√©rent du r√¥le en base, utilisation du r√¥le en base');
      }
    } catch (error) {
      console.error('Erreur restauration session:', error);
      this.clearSession();
      throw error;
    }
  }

  /**
   * Authentification Super Admin s√©curis√©e
   * Utilise le M√äME syst√®me que les autres utilisateurs : Num√©ro + PIN
   */
  /**
   * Authentification du compte Super Admin
   * Recherche le compte dans la base de donn√©es et cr√©e une session locale
   */
  async authenticateSuperAdmin(pin: string): Promise<{
    success: boolean;
    error?: string;
  }> {
    try {
      console.log('üîê D√©marrage authentification Super Admin...');
      
      // Identifiants du compte Super Admin (configur√©s dans la base)
      const superAdminPhone = '+33661002616';
      const superAdminEmail = '33661002616@ndjobi.com';
      const expectedPin = '999999'; // PIN configur√©

      // √âtape 1 : V√©rifier le PIN
      console.log('üîç V√©rification du PIN...');
      if (pin !== expectedPin) {
        console.log('‚ùå PIN incorrect:', pin);
        return { success: false, error: 'Code PIN incorrect' };
      }
      console.log('‚úÖ PIN correct');

      // √âtape 2 : Rechercher le compte dans auth.users via profiles
      console.log('üîç Recherche du profil Super Admin...');
      console.log('   - Email:', superAdminEmail);
      console.log('   - T√©l√©phone:', superAdminPhone);
      
      // Recherche par email
      let { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('id, email, full_name, phone, organization')
        .eq('email', superAdminEmail)
        .maybeSingle();

      console.log('üìä R√©sultat recherche par email:', { 
        profileData, 
        profileError,
        profileDataType: typeof profileData,
        profileDataNull: profileData === null,
        profileDataUndefined: profileData === undefined
      });

      // Si pas trouv√©, recherche par t√©l√©phone
      if (!profileData && !profileError) {
        console.log('üîç Tentative de recherche par t√©l√©phone...');
        const phoneResult = await supabase
          .from('profiles')
          .select('id, email, full_name, phone, organization')
          .eq('phone', superAdminPhone)
          .maybeSingle();

        profileData = phoneResult.data;
        profileError = phoneResult.error;
        
        console.log('üìä R√©sultat recherche par t√©l√©phone:', { 
          profileData, 
          profileError,
          profileDataType: typeof profileData,
          profileDataNull: profileData === null,
          profileDataUndefined: profileData === undefined
        });
      }
      
      // Debug suppl√©mentaire : essayer une recherche sans filtre pour voir ce qui existe
      console.log('üîç Debug: Recherche de TOUS les profils pour diagnostic...');
      const { data: allProfiles, error: allError } = await supabase
        .from('profiles')
        .select('id, email, phone, full_name')
        .limit(10);
      
      console.log('üìä Tous les profils (10 premiers):', { 
        count: allProfiles?.length || 0,
        profiles: allProfiles,
        error: allError
      });

      if (profileError) {
        console.error('‚ùå Erreur lors de la recherche du profil:', profileError);
        return { success: false, error: 'Erreur base de donn√©es' };
      }

      if (!profileData) {
        console.error('‚ùå Profil Super Admin introuvable');
        console.error('üí° Veuillez ex√©cuter le script CREER-PROFIL-SUPER-ADMIN.sql');
        return { 
          success: false, 
          error: 'Compte Super Admin introuvable - Veuillez contacter l\'administrateur syst√®me' 
        };
      }

      console.log('‚úÖ Profil trouv√©:', {
        id: profileData.id,
        email: profileData.email,
        full_name: profileData.full_name,
        phone: profileData.phone
      });

      // √âtape 3 : V√©rifier le r√¥le super_admin
      console.log('üîç V√©rification du r√¥le...');
      const { data: roleData, error: roleError } = await supabase
        .from('user_roles')
        .select('role')
        .eq('user_id', profileData.id)
        .maybeSingle();

      console.log('üìä R√©sultat v√©rification r√¥le:', { roleData, roleError });

      if (roleError) {
        console.error('‚ùå Erreur lors de la v√©rification du r√¥le:', roleError);
        return { success: false, error: 'Erreur v√©rification r√¥le' };
      }

      if (!roleData || roleData.role !== 'super_admin') {
        console.error('‚ùå R√¥le super_admin non attribu√© √† ce compte');
        console.error('üí° R√¥le actuel:', roleData?.role || 'aucun');
        return { success: false, error: 'Acc√®s non autoris√©' };
      }

      console.log('‚úÖ R√¥le super_admin confirm√©');

      // √âtape 4 : Cr√©er la session locale
      console.log('üîß Cr√©ation de la session locale...');
      
      this.currentUser = {
        id: profileData.id,
        email: profileData.email || superAdminEmail,
        phone: profileData.phone || superAdminPhone,
        user_metadata: {
          full_name: profileData.full_name || 'Super Administrateur',
          phone: profileData.phone || superAdminPhone,
          organization: profileData.organization || 'Administration Syst√®me'
        }
      };
      
      this.currentRole = 'super_admin';
      this.sessionToken = `super_admin_token_${Date.now()}`;

      // Sauvegarder la session
      await this.saveSession(this.currentUser, this.currentRole, this.sessionToken);

      console.log('‚úÖ Session Super Admin cr√©√©e avec succ√®s');
      console.log('üìä Session:', {
        user_id: this.currentUser.id,
        role: this.currentRole,
        email: this.currentUser.email
      });

      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur inattendue lors de l\'authentification Super Admin:', error);
      return { 
        success: false, 
        error: 'Erreur syst√®me - Veuillez r√©essayer' 
      };
    }
  }

  /**
   * R√©cup√®re le r√¥le d'un utilisateur depuis la base de donn√©es
   */
  private async getUserRole(userId: string): Promise<UserRole> {
    try {
      const { data, error } = await supabase
        .from('user_roles')
        .select('role')
        .eq('user_id', userId)
        .single();

      if (error || !data) {
        console.warn('R√¥le non trouv√©, attribution du r√¥le par d√©faut');
        return 'user';
      }

      return data.role as UserRole;
    } catch (error) {
      console.error('Erreur r√©cup√©ration du r√¥le:', error);
      return 'user';
    }
  }

  /**
   * Charge le profil complet de l'utilisateur
   */
  private async loadUserProfile(userId: string) {
    try {
      const { data: profile } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();

      if (profile) {
        this.currentUser = profile;
      }

      // Charger le r√¥le
      this.currentRole = await this.getUserRole(userId);
    } catch (error) {
      console.error('Erreur chargement du profil:', error);
    }
  }

  /**
   * Sauvegarde la session de mani√®re s√©curis√©e
   * Utilise sessionStorage au lieu de localStorage pour plus de s√©curit√©
   */
  private async saveSession(user: any, role: UserRole, token?: string) {
    this.currentUser = user;
    this.currentRole = role;
    this.sessionToken = token || null;

    // Utiliser sessionStorage (plus s√©curis√© que localStorage)
    const sessionData = {
      userId: user.id,
      role: role,
      timestamp: new Date().toISOString(),
    };

    sessionStorage.setItem('ndjobi_session', JSON.stringify(sessionData));
  }

  /**
   * Nettoie compl√®tement la session
   */
  clearSession() {
    this.currentUser = null;
    this.currentRole = null;
    this.sessionToken = null;
    
    // Nettoyer tous les storages
    sessionStorage.clear();
    localStorage.removeItem('ndjobi_session');
    localStorage.removeItem('localDemoSession');
    localStorage.removeItem('ndjobi_demo_session');
    
    // R√©initialiser l'√©tat global si n√©cessaire
    if (window.globalAuthState) {
      window.globalAuthState = null;
    }
  }

  /**
   * D√©connexion compl√®te
   */
  async signOut() {
    try {
      await supabase.auth.signOut();
      this.clearSession();
      
      // Rediriger vers la page d'authentification
      window.location.href = '/auth';
    } catch (error) {
      console.error('Erreur lors de la d√©connexion:', error);
      // Forcer le nettoyage m√™me en cas d'erreur
      this.clearSession();
      window.location.href = '/auth';
    }
  }

  /**
   * V√©rifie si l'utilisateur est authentifi√©
   * V√©rifie d'abord la session en m√©moire, puis dans sessionStorage
   */
  isAuthenticated(): boolean {
    // V√©rifier d'abord l'√©tat en m√©moire
    if (this.currentUser !== null && this.currentRole !== null) {
      return true;
    }

    // Si pas en m√©moire, v√©rifier dans sessionStorage
    try {
      const sessionData = sessionStorage.getItem('ndjobi_session');
      if (sessionData) {
        const parsed = JSON.parse(sessionData);
        if (parsed && parsed.userId && parsed.role) {
          // La session existe dans le storage
          return true;
        }
      }
    } catch (error) {
      console.error('Erreur v√©rification session:', error);
    }

    // V√©rifier la session d√©mo dans localStorage
    try {
      const demoSessionData = localStorage.getItem('ndjobi_demo_session');
      if (demoSessionData) {
        const parsed = JSON.parse(demoSessionData);
        if (parsed && parsed.user && parsed.role) {
          return true;
        }
      }
    } catch (error) {
      console.error('Erreur v√©rification session d√©mo:', error);
    }

    return false;
  }

  /**
   * R√©cup√®re l'utilisateur actuel
   * Si pas en m√©moire, tente de restaurer depuis sessionStorage
   */
  getCurrentUser() {
    // Priorit√© √† la session d√©mo locale si pr√©sente
    try {
      const demoSessionData = localStorage.getItem('ndjobi_demo_session');
      if (demoSessionData) {
        const parsed = JSON.parse(demoSessionData);
        if (parsed && parsed.user) {
          return parsed.user;
        }
      }
    } catch (error) {
      console.error('Erreur r√©cup√©ration user d√©mo:', error);
    }

    if (this.currentUser) {
      return this.currentUser;
    }

    // R√©cup√©ration depuis sessionStorage
    try {
      const sessionData = sessionStorage.getItem('ndjobi_session');
      if (sessionData) {
        const parsed = JSON.parse(sessionData);
        if (parsed && parsed.userId) {
          return { id: parsed.userId, role: parsed.role };
        }
      }
    } catch (error) {
      console.error('Erreur r√©cup√©ration user:', error);
    }

    return null;
  }

  /**
   * R√©cup√®re le r√¥le actuel
   * Si pas en m√©moire, tente de restaurer depuis sessionStorage
   */
  getCurrentRole(): UserRole | null {
    // Priorit√© au r√¥le de la session d√©mo locale si pr√©sent
    try {
      const demoSessionData = localStorage.getItem('ndjobi_demo_session');
      if (demoSessionData) {
        const parsed = JSON.parse(demoSessionData);
        if (parsed && parsed.role) {
          return parsed.role as UserRole;
        }
      }
    } catch (error) {
      console.error('Erreur r√©cup√©ration role d√©mo:', error);
    }

    if (this.currentRole) {
      return this.currentRole;
    }

    // R√©cup√©ration depuis sessionStorage
    try {
      const sessionData = sessionStorage.getItem('ndjobi_session');
      if (sessionData) {
        const parsed = JSON.parse(sessionData);
        if (parsed && parsed.role) {
          return parsed.role as UserRole;
        }
      }
    } catch (error) {
      console.error('Erreur r√©cup√©ration role:', error);
    }

    return null;
  }

  /**
   * R√©cup√®re le dashboard appropri√© selon le r√¥le
   */
  getDashboardPath(): string {
    const role = this.getCurrentRole();
    switch (role) {
      case 'super_admin':
        return '/dashboard/super-admin';
      case 'admin':
        return '/dashboard/admin';
      case 'agent':
        return '/dashboard/agent';
      case 'user':
        return '/dashboard/user';
      default:
        return '/auth';
    }
  }

  /**
   * V√©rifie si l'utilisateur a les permissions pour acc√©der √† une ressource
   */
  hasPermission(requiredRole: UserRole): boolean {
    const effectiveRole = this.getCurrentRole();
    const roleHierarchy: Record<UserRole, number> = {
      'super_admin': 4,
      'admin': 3,
      'sub_admin': 2.5,
      'agent': 2,
      'user': 1,
    };

    if (!effectiveRole) return false;

    return roleHierarchy[effectiveRole] >= roleHierarchy[requiredRole];
  }

  /**
   * Cr√©e une session anonyme par d√©faut pour les signalements sans compte
   * Utilise le compte "Citoyen Anonyme" cr√©√© dans Supabase
   */
  async createDefaultAnonymousSession(): Promise<{
    success: boolean;
    error?: string;
  }> {
    try {
      // Cr√©er une session locale pour le compte anonyme par d√©faut
      const success = defaultAnonymousAccountService.createAnonymousSession();
      
      if (!success) {
        return { success: false, error: 'Erreur cr√©ation session anonyme' };
      }

      // R√©cup√©rer les informations du compte anonyme
      const anonymousAccount = defaultAnonymousAccountService.getDefaultAnonymousAccount();
      
      // Cr√©er la session dans le service d'authentification
      this.currentUser = {
        id: defaultAnonymousAccountService.getCurrentAnonymousUser()?.email || 'anonymous',
        email: anonymousAccount.email,
        phone: anonymousAccount.phone,
        user_metadata: {
          full_name: anonymousAccount.fullName,
          phone: anonymousAccount.phone,
          organization: anonymousAccount.organization,
          is_anonymous: true,
          session_type: 'anonymous_default'
        }
      };
      
      this.currentRole = 'user';
      this.sessionToken = `anonymous_token_${Date.now()}`;
      
      // Sauvegarder la session
      this.saveSession(this.currentUser, this.currentRole, this.sessionToken);
      
      return { success: true };
    } catch (error) {
      console.error('Erreur cr√©ation session anonyme par d√©faut:', error);
      return { success: false, error: 'Erreur syst√®me' };
    }
  }

  /**
   * V√©rifie si la session actuelle est une session anonyme par d√©faut
   */
  isDefaultAnonymousSession(): boolean {
    return defaultAnonymousAccountService.hasAnonymousSession();
  }

  /**
   * R√©cup√®re les informations du compte anonyme par d√©faut
   */
  getDefaultAnonymousAccountInfo() {
    return defaultAnonymousAccountService.getDefaultAnonymousAccount();
  }
}

// Export de l'instance singleton
export const authService = AuthService.getInstance();

// Types pour TypeScript
declare global {
  interface Window {
    globalAuthState: any;
  }
}
