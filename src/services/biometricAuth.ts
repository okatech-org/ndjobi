// Service pour l'authentification biom√©trique
export interface BiometricCapabilities {
  hasFingerprint: boolean;
  hasFaceId: boolean;
  hasTouchId: boolean;
  isSupported: boolean;
}

export interface BiometricResult {
  success: boolean;
  error?: string;
  credential?: any;
}

class BiometricAuthService {
  private isSupported = false;
  private hasFingerprint = false;
  private hasFaceId = false;
  private hasTouchId = false;

  constructor() {
    this.checkCapabilities();
  }

  private async checkCapabilities() {
    try {
      // V√©rifier si l'API WebAuthn est support√©e
      if (typeof window !== 'undefined' && window.PublicKeyCredential) {
        this.isSupported = true;
        
        // V√©rifier les types d'authentificateurs disponibles
        try {
          const availableTypes = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
          this.hasFingerprint = availableTypes;
          this.hasFaceId = availableTypes; // Face ID et Touch ID utilisent la m√™me API
          this.hasTouchId = availableTypes;
        } catch (error) {
          console.warn('Erreur lors de la v√©rification des authentificateurs:', error);
          // Fallback sur la d√©tection par user agent
          this.detectByUserAgent();
        }
      } else {
        // Fallback sur la d√©tection par user agent si WebAuthn n'est pas disponible
        this.detectByUserAgent();
      }
    } catch (error) {
      console.warn('Erreur lors de la v√©rification des capacit√©s biom√©triques:', error);
      this.isSupported = false;
      this.detectByUserAgent();
    }
  }

  private detectByUserAgent() {
    if (typeof window !== 'undefined') {
      const userAgent = navigator.userAgent;
      
      // iOS Safari
      if (/iPad|iPhone|iPod/.test(userAgent)) {
        this.hasFaceId = true;
        this.hasTouchId = true;
        this.isSupported = true;
      }
      
      // Android Chrome
      if (/Android/.test(userAgent) && /Chrome/.test(userAgent)) {
        this.hasFingerprint = true;
        this.isSupported = true;
      }
      
      // Desktop Chrome/Edge avec Windows Hello
      if (/Windows/.test(userAgent) && (/Chrome/.test(userAgent) || /Edg/.test(userAgent))) {
        this.hasFingerprint = true;
        this.hasFaceId = true;
        this.isSupported = true;
      }
    }
  }

  public getCapabilities(): BiometricCapabilities {
    return {
      hasFingerprint: this.hasFingerprint,
      hasFaceId: this.hasFaceId,
      hasTouchId: this.hasTouchId,
      isSupported: this.isSupported
    };
  }

  public async registerBiometric(userId: string, userInfo: { name: string; displayName: string }): Promise<BiometricResult> {
    try {
      if (!this.isSupported) {
        return { success: false, error: 'Authentification biom√©trique non support√©e' };
      }

      const credential = await navigator.credentials.create({
        publicKey: {
          challenge: new Uint8Array(32), // G√©n√©rer un challenge al√©atoire
          rp: {
            name: "NDJOBI",
            id: window.location.hostname,
          },
          user: {
            id: new TextEncoder().encode(userId),
            name: userInfo.name,
            displayName: userInfo.displayName,
          },
          pubKeyCredParams: [
            { type: "public-key", alg: -7 }, // ES256
            { type: "public-key", alg: -257 }, // RS256
          ],
          authenticatorSelection: {
            authenticatorAttachment: "platform",
            userVerification: "required",
          },
          timeout: 60000,
          attestation: "direct"
        }
      });

      // Stocker les informations d'authentification
      if (credential) {
        localStorage.setItem(`biometric_${userId}`, JSON.stringify({
          credentialId: credential.id,
          registeredAt: new Date().toISOString()
        }));
      }

      return { success: true, credential };
    } catch (error: any) {
      console.error('Erreur lors de l\'enregistrement biom√©trique:', error);
      return { 
        success: false, 
        error: error.message || 'Erreur lors de l\'enregistrement biom√©trique' 
      };
    }
  }

  public async authenticateBiometric(userId: string): Promise<BiometricResult> {
    try {
      if (!this.isSupported) {
        return { success: false, error: 'Authentification biom√©trique non support√©e' };
      }

      // V√©rifier si l'utilisateur a enregistr√© une authentification biom√©trique
      const storedAuth = localStorage.getItem(`biometric_${userId}`);
      if (!storedAuth) {
        return { success: false, error: 'Aucune authentification biom√©trique enregistr√©e' };
      }

      const credential = await navigator.credentials.get({
        publicKey: {
          challenge: new Uint8Array(32),
          allowCredentials: [{
            type: "public-key",
            id: new TextEncoder().encode(JSON.parse(storedAuth).credentialId),
            transports: ["internal"]
          }],
          userVerification: "required",
          timeout: 30000 // R√©duire le timeout √† 30 secondes
        }
      });

      return { success: true, credential };
    } catch (error: any) {
      console.error('Erreur lors de l\'authentification biom√©trique:', error);
      
      // Gestion sp√©cifique des erreurs WebAuthn
      let errorMessage = 'Authentification biom√©trique √©chou√©e';
      
      if (error.name === 'NotAllowedError') {
        errorMessage = 'Authentification annul√©e ou refus√©e par l\'utilisateur';
      } else if (error.name === 'TimeoutError') {
        errorMessage = 'Authentification expir√©e, veuillez r√©essayer';
      } else if (error.name === 'NotSupportedError') {
        errorMessage = 'Authentification biom√©trique non support√©e sur cet appareil';
      } else if (error.name === 'SecurityError') {
        errorMessage = 'Erreur de s√©curit√©, veuillez utiliser votre code PIN';
      } else if (error.name === 'InvalidStateError') {
        errorMessage = '√âtat invalide, veuillez r√©enregistrer votre authentification';
      }
      
      return { 
        success: false, 
        error: errorMessage
      };
    }
  }

  public async isBiometricRegistered(userId: string): Promise<boolean> {
    const storedAuth = localStorage.getItem(`biometric_${userId}`);
    return !!storedAuth;
  }

  public async removeBiometricRegistration(userId: string): Promise<boolean> {
    try {
      localStorage.removeItem(`biometric_${userId}`);
      return true;
    } catch (error) {
      console.error('Erreur lors de la suppression de l\'authentification biom√©trique:', error);
      return false;
    }
  }

  public getBiometricIcon(): string {
    if (this.hasFaceId) return 'üë§'; // Face ID
    if (this.hasFingerprint) return 'üëÜ'; // Touch ID / Fingerprint
    return 'üîê'; // Fallback
  }

  public getBiometricLabel(): string {
    if (this.hasFaceId) return 'Face ID';
    if (this.hasFingerprint) return 'Touch ID';
    return 'Authentification biom√©trique';
  }

  public async resetBiometricRegistration(userId: string): Promise<boolean> {
    try {
      // Supprimer l'enregistrement local
      localStorage.removeItem(`biometric_${userId}`);
      
      // Optionnel : supprimer aussi du serveur si n√©cessaire
      // await this.deleteFromServer(userId);
      
      return true;
    } catch (error) {
      console.error('Erreur lors de la r√©initialisation biom√©trique:', error);
      return false;
    }
  }

  public getErrorMessage(error: any): string {
    if (error.name === 'NotAllowedError') {
      return 'Authentification annul√©e. Utilisez votre code PIN.';
    } else if (error.name === 'TimeoutError') {
      return 'Authentification expir√©e. R√©essayez.';
    } else if (error.name === 'NotSupportedError') {
      return 'Authentification biom√©trique non support√©e.';
    } else if (error.name === 'SecurityError') {
      return 'Erreur de s√©curit√©. Utilisez votre code PIN.';
    } else if (error.name === 'InvalidStateError') {
      return 'Authentification invalide. R√©enregistrez-vous.';
    }
    return 'Erreur d\'authentification. Utilisez votre code PIN.';
  }
}

// Instance singleton
export const biometricAuth = new BiometricAuthService();
