// src/services/twilioVerifyService.ts
import { supabase } from '@/integrations/supabase/client';

type Channel = 'sms' | 'whatsapp' | 'email';

// Mode d√©veloppement: utiliser un code fixe pour les tests
const DEV_MODE = import.meta.env.MODE === 'development';
const DEV_OTP_CODE = '123456'; // Code fixe pour le d√©veloppement

export const twilioVerifyService = {
  async start(to: string, channel: Channel = 'sms'): Promise<{ success: boolean; error?: string }> {
    // Mode d√©veloppement: simulation sans appel API
    if (DEV_MODE) {
      console.log(`üß™ [DEV MODE] Code OTP simul√©: ${DEV_OTP_CODE}`);
      console.log(`üì± Canal: ${channel}`);
      console.log(`üìß Destinataire: ${to}`);
      
      // Simuler un d√©lai r√©seau
      await new Promise(resolve => setTimeout(resolve, 500));
      
      return { 
        success: true 
      };
    }

    // Mode production: appel r√©el √† l'Edge Function
    try {
      const { data, error } = await supabase.functions.invoke('start-verification', {
        body: { to, channel },
      });
      if (error) throw error;
      return { success: true };
    } catch (e: any) {
      return { success: false, error: e?.message || 'Erreur d√©marrage v√©rification' };
    }
  },

  async check(to: string, code: string): Promise<{ success: boolean; valid?: boolean; error?: string }> {
    // Mode d√©veloppement: v√©rifier contre le code fixe
    if (DEV_MODE) {
      console.log(`üß™ [DEV MODE] V√©rification du code: ${code}`);
      console.log(`‚úÖ Code attendu: ${DEV_OTP_CODE}`);
      
      // Simuler un d√©lai r√©seau
      await new Promise(resolve => setTimeout(resolve, 300));
      
      const isValid = code === DEV_OTP_CODE;
      console.log(`${isValid ? '‚úÖ' : '‚ùå'} Validation: ${isValid ? 'SUCCESS' : 'FAILED'}`);
      
      return { 
        success: true, 
        valid: isValid 
      };
    }

    // Mode production: appel r√©el √† l'Edge Function
    try {
      const { data, error } = await supabase.functions.invoke('check-verification', {
        body: { to, code },
      });
      if (error) throw error;
      return { success: true, valid: data?.valid === true };
    } catch (e: any) {
      return { success: false, error: e?.message || 'Erreur v√©rification code' };
    }
  },

  // R√©cup√©rer le code de d√©veloppement pour l'afficher √† l'utilisateur
  getDevCode(): string | null {
    return DEV_MODE ? DEV_OTP_CODE : null;
  },

  isDevMode(): boolean {
    return DEV_MODE;
  }
};
