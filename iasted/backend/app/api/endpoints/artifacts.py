"""
Endpoints pour la g√©n√©ration et gestion d'artefacts (PDF, pr√©sentations, etc.)
"""

import logging
from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks
from pydantic import BaseModel

from app.core.auth import get_current_user
from app.services.artifact_service import ArtifactService

logger = logging.getLogger(__name__)
router = APIRouter()


class ArtifactGenerationRequest(BaseModel):
    """Requ√™te de g√©n√©ration d'artefact"""
    topic: str
    sections: List[str]
    artifact_type: str = "pdf_report"


class ArtifactResponse(BaseModel):
    """R√©ponse de g√©n√©ration d'artefact"""
    artifact_id: str
    status: str
    download_url: Optional[str] = None
    created_at: str


@router.post("/generate", response_model=ArtifactResponse, tags=["Artifacts"])
async def generate_artifact(
    request: ArtifactGenerationRequest,
    background_tasks: BackgroundTasks,
    current_user = Depends(get_current_user)
):
    """
    G√©n√®re un artefact (rapport PDF, pr√©sentation, etc.)
    
    Args:
        request: Param√®tres de g√©n√©ration
        background_tasks: Tasks en arri√®re-plan
        
    Returns:
        ArtifactResponse: ID et statut de l'artefact
    """
    logger.info(f"üìÑ G√©n√©ration artefact: type={request.artifact_type}, topic={request.topic}")
    
    artifact_service = ArtifactService()
    
    artifact_id = "artifact_123"
    
    return ArtifactResponse(
        artifact_id=artifact_id,
        status="processing",
        created_at="2025-01-01T00:00:00Z"
    )


@router.get("/{artifact_id}", response_model=ArtifactResponse, tags=["Artifacts"])
async def get_artifact(
    artifact_id: str,
    current_user = Depends(get_current_user)
):
    """
    R√©cup√®re les informations d'un artefact
    
    Args:
        artifact_id: ID de l'artefact
        
    Returns:
        ArtifactResponse: D√©tails et URL de t√©l√©chargement
    """
    logger.info(f"üì• R√©cup√©ration artefact: id={artifact_id}")
    
    return ArtifactResponse(
        artifact_id=artifact_id,
        status="completed",
        download_url=f"https://s3.amazonaws.com/artifacts/{artifact_id}.pdf",
        created_at="2025-01-01T00:00:00Z"
    )


@router.get("/", tags=["Artifacts"])
async def list_artifacts(
    current_user = Depends(get_current_user),
    limit: int = 50,
    offset: int = 0
):
    """
    Liste les artefacts de l'utilisateur
    
    Returns:
        List[ArtifactResponse]: Liste d'artefacts
    """
    logger.info(f"üìö Liste artefacts: user={current_user['id']}")
    
    return []

