/**
 * Script pour cr√©er le compte Super Admin directement via Supabase
 * Utilise la Service Role Key pour contourner les restrictions RLS
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

// Configuration Supabase
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'https://xfxqwlbqysiezqdpeqpv.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY non trouv√©e dans les variables d\'environnement');
  console.log('üí° Ajoutez-la dans votre fichier .env.local');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
});

const SUPER_ADMIN_EMAIL = '33661002616@ndjobi.com';
const SUPER_ADMIN_PHONE = '+33661002616';
const SUPER_ADMIN_PIN = '999999';
const SUPER_ADMIN_FULL_NAME = 'Super Administrateur';
const SUPER_ADMIN_ROLE = 'super_admin';

async function createSuperAdminAccount() {
  console.log('üîß Cr√©ation du compte Super Admin...');
  console.log('====================================');

  try {
    // 1. V√©rifier si l'utilisateur existe d√©j√†
    console.log('üîç V√©rification de l\'existence du compte...');
    
    const { data: existingAuth, error: authCheckError } = await supabase.auth.admin.listUsers();
    
    if (authCheckError) {
      console.error('‚ùå Erreur lors de la v√©rification:', authCheckError);
      throw authCheckError;
    }

    const existingUser = existingAuth.users.find(
      u => u.email === SUPER_ADMIN_EMAIL || u.phone === SUPER_ADMIN_PHONE
    );

    let userId;

    if (existingUser) {
      userId = existingUser.id;
      console.log('‚ö†Ô∏è Le compte Super Admin existe d√©j√† dans auth.users avec ID:', userId);
    } else {
      console.log('üìù Le compte Super Admin n\'existe pas, cr√©ation en cours...');
      
      // 2. Cr√©er l'utilisateur dans auth.users
      const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
        email: SUPER_ADMIN_EMAIL,
        phone: SUPER_ADMIN_PHONE,
        password: SUPER_ADMIN_PIN,
        email_confirm: true,
        phone_confirm: true,
        user_metadata: {
          full_name: SUPER_ADMIN_FULL_NAME,
          phone: SUPER_ADMIN_PHONE,
          organization: 'Administration Syst√®me'
        },
      });

      if (createError) {
        console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur:', createError);
        throw createError;
      }
      
      userId = newUser.user.id;
      console.log('‚úÖ Compte auth cr√©√© avec ID:', userId);
    }

    // 3. Cr√©er/Mettre √† jour le profil dans public.profiles
    console.log('üìù Cr√©ation/mise √† jour du profil...');
    
    const { error: profileError } = await supabase
      .from('profiles')
      .upsert({
        id: userId,
        email: SUPER_ADMIN_EMAIL,
        full_name: SUPER_ADMIN_FULL_NAME,
        phone: SUPER_ADMIN_PHONE,
        organization: 'Administration Syst√®me',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      }, { onConflict: 'id' });

    if (profileError) {
      console.error('‚ùå Erreur lors de la cr√©ation du profil:', profileError);
      throw profileError;
    }
    console.log('‚úÖ Profil cr√©√©/mis √† jour dans public.profiles');

    // 4. Attribuer le r√¥le dans public.user_roles
    console.log('üìù Attribution du r√¥le super_admin...');
    
    const { error: roleError } = await supabase
      .from('user_roles')
      .upsert({
        user_id: userId,
        role: SUPER_ADMIN_ROLE,
        created_at: new Date().toISOString(),
      }, { onConflict: 'user_id' });

    if (roleError) {
      console.error('‚ùå Erreur lors de l\'attribution du r√¥le:', roleError);
      throw roleError;
    }
    console.log('‚úÖ R√¥le attribu√© dans public.user_roles');

    // 5. V√©rification finale
    console.log('\nüîç V√©rification finale...');
    
    const { data: verification, error: verifyError } = await supabase
      .from('profiles')
      .select('id, email, full_name, phone, organization')
      .eq('id', userId)
      .single();

    if (verifyError) {
      console.error('‚ùå Erreur lors de la v√©rification:', verifyError);
    } else {
      console.log('‚úÖ Profil v√©rifi√©:', verification);
    }

    const { data: roleVerif, error: roleVerifyError } = await supabase
      .from('user_roles')
      .select('role')
      .eq('user_id', userId)
      .single();

    if (roleVerifyError) {
      console.error('‚ùå Erreur lors de la v√©rification du r√¥le:', roleVerifyError);
    } else {
      console.log('‚úÖ R√¥le v√©rifi√©:', roleVerif.role);
    }

    console.log('\n‚úÖ Compte Super Admin configur√© avec succ√®s !');
    console.log('üìã Informations :');
    console.log('   Email:', SUPER_ADMIN_EMAIL);
    console.log('   T√©l√©phone:', SUPER_ADMIN_PHONE);
    console.log('   PIN:', SUPER_ADMIN_PIN);
    console.log('   R√¥le:', SUPER_ADMIN_ROLE);
    console.log('\nüéØ Testez maintenant sur /auth/super-admin');

  } catch (error) {
    console.error('\n‚ùå Une erreur est survenue:', error);
    process.exit(1);
  }
}

createSuperAdminAccount();

